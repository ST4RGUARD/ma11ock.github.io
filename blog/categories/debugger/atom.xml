<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debugger | a m4lefic security blog]]></title>
  <link href="http://ma11ock.github.io/blog/categories/debugger/atom.xml" rel="self"/>
  <link href="http://ma11ock.github.io/"/>
  <updated>2016-04-18T15:24:31-05:00</updated>
  <id>http://ma11ock.github.io/</id>
  <author>
    <name><![CDATA[m4lefic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[STRACE]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/18/strace/"/>
    <updated>2016-04-18T14:11:51-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/18/strace</id>
    <content type="html"><![CDATA[<h2>strace</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer</em></p>

<ul>
<li>note: <em>strace man page may need to</em> <strong>apt-get install strace</strong> <em>on kali linux</em></li>
</ul>


<p>This section will cover the strace utility. Strace runs against the command or executable given. It intercepts the system calls
for these processes and records them. This provides very useful diagnostic, and debugging to the user as well as the ability to profile programs.</p>

<!--more-->


<ul>
<li><strong>usage:</strong> strace executable args</li>
<li>system calls are displayed as they relate to our program line by line</li>
<li><strong>-r</strong> is a relative timestamp that gives insight into how long each sys call takes</li>
</ul>


<p><img src="/images/stracertimestamp.png" alt="strace -r" /></p>

<ul>
<li>if we are interested in specific system calls or multiple calls in the executable</li>
<li><strong>strace -e connect,write binary args</strong></li>
</ul>


<p><img src="/images/stracemultisyscall.png" alt="strace specific/multi sys calls" /></p>

<ul>
<li>we can also monitor sys calls of a running process</li>
<li><strong>nc google.com 80</strong></li>
</ul>


<p><img src="/images/stracenc.png" alt="strace netcat example" /></p>

<ul>
<li>we netcat google on port 80</li>
<li>we then grab the process ID of the running process &amp; then run strace on that PID</li>
<li><strong>ps ax|grep nc</strong></li>
<li><strong>strace -p PID</strong></li>
</ul>


<p><img src="/images/straceprocattach.png" alt="strace active process" /></p>

<ul>
<li>strace now says process 6697 attached, and is waiting</li>
<li><p>if we enter <strong>GET /</strong> as seen in our netcat example picture - all of the sys calls used to perform that request are displayed in the above pic</p></li>
<li><p>we can print a statistical summary of all the sys calls made</p></li>
<li><strong>strace -c binary args</strong></li>
</ul>


<p><img src="/images/stracesummary.png" alt="strace sys call summary" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NM]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/18/nm/"/>
    <updated>2016-04-18T11:33:42-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/18/nm</id>
    <content type="html"><![CDATA[<h2>NM</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU Binutils docs</em></p>

<p>This section will cover the GNU utility NM. NM lists symbols from object files. It can give us
a quick way to analyze different debug symbols in a binary.</p>

<!--more-->


<ul>
<li>the output is split into 3 columns by default <strong>Virtual Address</strong> | <strong>Symbol Type</strong> | <strong>Symbol Name</strong></li>
</ul>


<p><img src="/images/nmsymboltype.png" alt="nm symbol types" /></p>

<ul>
<li><strong>lower case</strong> letter is a <strong>local</strong> symbol</li>
<li><strong>upper case</strong> letter is an <strong>external</strong> symbol</li>
</ul>


<h2>Common Usage</h2>

<ul>
<li><strong>nm exe</strong></li>
<li><strong>nm -a calc_DEBUG|grep &lsquo;function&rsquo;</strong>  <em>displays all symbols and we can grep for specific function</em></li>
<li><strong>nm -n calc_DEBUG</strong>                  <em>displays a list of all symbols sorted by address</em></li>
<li><strong>nm -g calc_DEBUG</strong>                  <em>displays a list of external symbols</em></li>
<li><strong>nm -S calc_DEBUG|grep &lsquo;function&rsquo;</strong>  <em>displays the size in bytes of reserved memory</em></li>
<li><strong>nm calc_DEBUG|grep &lsquo;B &rsquo;</strong>           <em>displays the uninitialized data</em></li>
<li><strong>nm calc_DEBUG|grep &rsquo;D &lsquo;</strong>           <em>displays the initialized data</em></li>
</ul>


<p><img src="/images/nmusage.png" alt="nm usage examples" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/15/gdbdbg/"/>
    <updated>2016-04-15T12:54:38-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/15/gdbdbg</id>
    <content type="html"><![CDATA[<h2>GDB Debug Symbols</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer</em></p>

<p>  This section gives various information about the variables, functions, etc in a binary that can be read by the debugger.
  We will go over compiling source code with gdb debug symbols, what this allows to be read, as well as adding to, and stripping symbols from, a binary.</p>

<!--more-->


<ul>
<li>can be part of the binary or a separate file</li>
<li><strong>gcc -ggdb</strong> to compile with debug symbols for gdb</li>
</ul>


<p><img src="/images/gdbinfovar.png" alt="gdb info variables" /></p>

<ul>
<li><strong>list</strong> will drop us to the main function if it has the source available</li>
<li><strong>list 3</strong> will take you to that line of the source</li>
<li><strong>info variables</strong> if compiled with dbg symbols  will display found variables under defined for the source file</li>
<li>if not compiled with symbols or source not available, the variables may be found and listed under non-debugging symbols</li>
<li><strong>info scope functionName</strong> will provide local variables</li>
</ul>


<p><img src="/images/gdbsymbols.png" alt="gdb info functions" /></p>

<ul>
<li>here we use info functions to display all functions found in the source with debug options given at compile time</li>
</ul>


<h2>Stripping Debug Symbols</h2>

<ul>
<li><strong>objcopy &ndash;only-keep-debug binary dstfile</strong> used to strip debug symbols from a binary &amp; save symbols to file</li>
<li><strong>strip &ndash;strip-debug binary</strong> used to strip symbols from binary - use <strong>&ndash;strip-uneeded</strong> to provide only enough to load binary (less information)</li>
</ul>


<h2>Adding Debug Symbols</h2>

<ul>
<li><strong>symbol-file symbols</strong> used to add debug symbols file to binary without symbols at runtime in <strong>gdb</strong></li>
<li><strong>objcopy &ndash;add-gnu-debuglink=debug_symbols binary</strong> used to add debug symbols to stripped binary where <strong>debug_symbols</strong> is the symbols file, and <strong>binary</strong> is the stripped binary</li>
</ul>

]]></content>
  </entry>
  
</feed>
