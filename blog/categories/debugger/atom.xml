<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debugger | a m4lefic security blog]]></title>
  <link href="http://ma11ock.github.io/blog/categories/debugger/atom.xml" rel="self"/>
  <link href="http://ma11ock.github.io/"/>
  <updated>2016-04-20T15:58:33-05:00</updated>
  <id>http://ma11ock.github.io/</id>
  <author>
    <name><![CDATA[m4lefic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/20/gdb/"/>
    <updated>2016-04-20T14:00:25-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/20/gdb</id>
    <content type="html"><![CDATA[<h2>gdb modifying memory</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU GDB documentation</em></p>

<p>  This section will discuss modifying memory in gdb. We will look at altering variables and registers during our code&rsquo;s execution to control the flow our program.</p>

<!--more-->


<ul>
<li><strong>run TEST 10 10</strong> <em>run our program to examine the args</em></li>
<li><strong>b main</strong> <em>set a breakpoint on our main function to inspect our first argument</em></li>
</ul>


<p>  if we re-run our program, execution is paused when the breakpoint is hit. to see our argument&rsquo;s contents we can</p>

<ul>
<li><strong>print argv[1]</strong></li>
<li><strong>x/5c argv[1]</strong> <em>or we can examine the memory as 5 character with each byte displayed as hex and the terminating null character displayed as well</em></li>
</ul>


<p><img src="/images/gdbsetarg.png" alt="gdb examine argument" /></p>

<p>  to change a character at that address we can</p>

<ul>
<li><strong>set {char} address = &lsquo;B&rsquo;</strong> <em>now TEST becomes BEST - **set {int} (address+4) = 1 here we modify null and change it to an integer so BEST\x00 becomes BEST1</em></li>
</ul>


<p><img src="/images/gdbsetradix.png" alt="gdb set radix" /></p>

<p>  at times you may want to change the default numeric input and output for gdb. you can of course print different representations of output to the screen, but if you are going to be following and modifying variables that are used in calculations throughout the program, you may want to use a set format of input that will be easy to modify and follow (ex all hex/dec/octal etc). to change the way your input and output is displayed you need to change the radix</p>

<ul>
<li><strong>show input-radix</strong></li>
<li><strong>show output-radix</strong></li>
<li><strong>set radix 10.</strong> <em>will change both input and output to base 10</em></li>
</ul>


<p>  now if i want to modify a variable that is used in a base 10 calculation I don&rsquo;t have to do any conversions. for example let&rsquo;s modify our sum variable.</p>

<ul>
<li><strong>b 24</strong> <em>to better demonstrate this we put a breakpoint on the line where our sum has been calculated and is being printed</em></li>
<li><strong>print sum</strong> <em>after we continue execution of the program and our BP is hit we can print our variable</em></li>
</ul>


<p>  let&rsquo;s modify the contents. because we changed the input-radix we can enter a base 10 number and it will be taken in &amp; then output as a base 10 number</p>

<ul>
<li><strong>set sum = 1500</strong> <em>if we continue execution the Sum of our arguments is now printed as 1500</em></li>
</ul>


<h2>setting registers</h2>

<p><img src="/images/gdbsetreg.png" alt="gdb set registers" /></p>

<p>  now let&rsquo;s modify our program&rsquo;s registers and see if we can control the flow of our program.</p>

<ul>
<li><strong>info reg</strong> <em>display our current register values</em></li>
<li><strong>set $eax = 10</strong> <em>alter the contents of the eax register to 10</em></li>
</ul>


<p>  let&rsquo;s begin by looking for the non executing function we put in our program</p>

<ul>
<li><strong>info func not</strong> <em>finds a function called notExecute</em></li>
<li><strong>info address notExecute</strong> <em>find the address of our function at 0x80484d4</em></li>
<li><strong>set $eip = 0x80484d4</strong> <em>set our eip register to that address</em></li>
<li><strong>info r $eip</strong> <em>our eip reg is now the notExecute function</em></li>
<li><strong>c</strong> <em>our function notExecute is run because its address is the instruction run</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/19/gdb/"/>
    <updated>2016-04-19T15:37:03-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/19/gdb</id>
    <content type="html"><![CDATA[<h2>gdb breakpoints</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU GDB documentation</em></p>

<p>  This section will discuss breakpoints in gdb. A breakpoint pauses the execution of a program, and
  gives the user the ability to inspect and modify registers and memory while the program is paused.</p>

<!--more-->


<p>  let&rsquo;s inspect a program</p>

<ul>
<li><strong>gdb ./program</strong></li>
<li><strong>run &ldquo;args&rdquo;</strong>  <em>runs program with arguments</em></li>
</ul>


<p>  let&rsquo;s see what happens with our main function. we can run any of the following</p>

<ul>
<li><strong>break main</strong></li>
<li><strong>break lineno</strong></li>
<li><strong>break *address</strong></li>
</ul>


<p>  to get the address of main we can run</p>

<ul>
<li><strong>p &amp;main</strong></li>
<li><strong>info address main</strong></li>
</ul>


<p>  however if we run <strong>break main</strong> we will get a different address than what is given from running the above commands. we will in fact get
  dumped into our main function at our echo function call that reads in our user input - as the address to set the breakpoint</p>

<p>  to view any breakpoints set</p>

<ul>
<li>info breakpoints  <em>disable 1 or delete 1 allows us to modify our first breakpoint</em></li>
</ul>


<p><img src="/images/gdbreak1.png" alt="gdb set breakpoint" /></p>

<p>  let&rsquo;s re-enable our breakpoint. if we re-run our program with our breakpoint set <strong>run &ldquo;ImArg&rdquo;</strong> our program will pause at our breakpoint.
  if we want to look at that arg in our main function we can <strong>examine memory</strong></p>

<h2>examine memory</h2>

<ul>
<li><strong>print argv[1]</strong> <em>help x will give a list of helpful commands to inspect this further</em></li>
<li><strong>x/s argv[1]</strong> <em>if we want to look at 1 item and print it as a string this would be the notation</em></li>
<li><strong>x/2s argv[0]</strong> <em>above the 1 is not needed in front of the s for 1 item, however here if we want 2 items printed from argv[0] the number 2 is needed</em></li>
</ul>


<p><img src="/images/gdbexaminemem.png" alt="gdb examine memory" /></p>

<p>  let&rsquo;s look more closely at the main function *similarly we could disassemble an address or</p>

<ul>
<li><strong>dis main</strong> <em>will disassemble the main function</em> <strong>=></strong> <em>symbol points to the EIP register</em></li>
<li><strong>x/i address</strong> <em>will show the assembly instruction for that 1 specific address</em></li>
<li><strong>x/10i address</strong> <em>this will show instructions for 10 addresses starting with the one given</em></li>
<li><strong>x/10xw $esp</strong> <em>this will print 10 hex words starting from the top of the stack - the ESP register</em></li>
</ul>


<p><img src="/images/gdbdis.png" alt="gdb dissasemble" /></p>

<ul>
<li><strong>CTRL-L</strong> <em>in my Ubuntu Linux distro clears the screen within gdb</em></li>
</ul>


<p>  <strong>step</strong> &amp; <strong>stepi</strong> help step through the code <em>step goes line by line of the code &amp; stepi steps through 1 instruction at a time</em></p>

<p><img src="/images/gdbstep.png" alt="gdb step" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STRACE]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/18/strace/"/>
    <updated>2016-04-18T14:11:51-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/18/strace</id>
    <content type="html"><![CDATA[<h2>strace</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; strace man page</em></p>

<ul>
<li><em>may need to</em> <strong>apt-get install strace</strong> <em>on kali linux</em></li>
</ul>


<p>This section will cover the strace utility. Strace runs against the command or executable given. It intercepts the system calls
for these processes and records them. This provides very useful diagnostic, and debugging to the user as well as the ability to profile programs.</p>

<!--more-->


<ul>
<li><strong>usage:</strong> strace executable args</li>
<li>system calls are displayed as they relate to our program line by line</li>
<li><strong>-r</strong> is a relative timestamp that gives insight into how long each sys call takes</li>
</ul>


<p><img src="/images/stracertimestamp.png" alt="strace -r" /></p>

<ul>
<li>if we are interested in specific system calls or multiple calls in the executable</li>
<li><strong>strace -e connect,write binary args</strong></li>
</ul>


<p><img src="/images/stracemultisyscall.png" alt="strace specific/multi sys calls" /></p>

<h2>strace running process</h2>

<ul>
<li>we can also monitor sys calls of a running process</li>
<li><strong>nc google.com 80</strong></li>
</ul>


<p><img src="/images/stracenc.png" alt="strace netcat example" /></p>

<ul>
<li>we netcat google on port 80</li>
<li>we then grab the process ID of the running process &amp; then run strace on that PID</li>
<li><strong>ps ax|grep nc</strong></li>
<li><strong>strace -p PID</strong></li>
</ul>


<p><img src="/images/straceprocattach.png" alt="strace active process" /></p>

<ul>
<li>strace now says process 6697 attached, and is waiting</li>
<li><p>if we enter <strong>GET /</strong> as seen in our netcat example picture - all of the sys calls used to perform that request are displayed in the above pic</p></li>
<li><p>we can print a statistical summary of all the sys calls made</p></li>
<li><strong>strace -c binary args</strong></li>
</ul>


<p><img src="/images/stracesummary.png" alt="strace sys call summary" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NM]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/18/nm/"/>
    <updated>2016-04-18T11:33:42-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/18/nm</id>
    <content type="html"><![CDATA[<h2>nm</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU Binutils docs</em></p>

<p>This section will cover the GNU utility NM. NM lists symbols from object files. It can give us
a quick way to analyze different debug symbols in a binary.</p>

<!--more-->


<ul>
<li>the output is split into 3 columns by default <strong>Virtual Address</strong> | <strong>Symbol Type</strong> | <strong>Symbol Name</strong></li>
</ul>


<p><img src="/images/nmsymboltype.png" alt="nm symbol types" /></p>

<ul>
<li><strong>lower case</strong> letter is a <strong>local</strong> symbol</li>
<li><strong>upper case</strong> letter is an <strong>external</strong> symbol</li>
</ul>


<h2>common usage</h2>

<ul>
<li><strong>nm exe</strong></li>
<li><strong>nm -a calc_DEBUG|grep &lsquo;function&rsquo;</strong>  <em>displays all symbols and we can grep for specific function</em></li>
<li><strong>nm -n calc_DEBUG</strong>                  <em>displays a list of all symbols sorted by address</em></li>
<li><strong>nm -g calc_DEBUG</strong>                  <em>displays a list of external symbols</em></li>
<li><strong>nm -S calc_DEBUG|grep &lsquo;function&rsquo;</strong>  <em>displays the size in bytes of reserved memory</em></li>
<li><strong>nm calc_DEBUG|grep &lsquo;B &rsquo;</strong>           <em>displays the uninitialized data</em></li>
<li><strong>nm calc_DEBUG|grep &rsquo;D &lsquo;</strong>           <em>displays the initialized data</em></li>
</ul>


<p><img src="/images/nmusage.png" alt="nm usage examples" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/15/gdbdbg/"/>
    <updated>2016-04-15T07:54:38-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/15/gdbdbg</id>
    <content type="html"><![CDATA[<h2>gdb debug symbols</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer</em></p>

<p>  This section gives various information about the variables, functions, etc in a binary that can be read by the debugger.
  We will go over compiling source code with gdb debug symbols, what this allows to be read, as well as adding to, and stripping symbols from, a binary.</p>

<!--more-->


<ul>
<li>can be part of the binary or a separate file</li>
<li><strong>gcc -ggdb</strong> to compile with debug symbols for gdb</li>
</ul>


<p><img src="/images/gdbinfovar.png" alt="gdb info variables" /></p>

<ul>
<li><strong>list</strong> will drop us to the main function if it has the source available</li>
<li><strong>list 3</strong> will take you to that line of the source</li>
<li><strong>info variables</strong> if compiled with dbg symbols  will display found variables under defined for the source file</li>
<li>if not compiled with symbols or source not available, the variables may be found and listed under non-debugging symbols</li>
<li><strong>info scope functionName</strong> will provide local variables</li>
</ul>


<p><img src="/images/gdbsymbols.png" alt="gdb info functions" /></p>

<ul>
<li>here we use info functions to display all functions found in the source with debug options given at compile time</li>
</ul>


<h2>stripping debug symbols</h2>

<ul>
<li><strong>objcopy &ndash;only-keep-debug binary dstfile</strong> used to strip debug symbols from a binary &amp; save symbols to file</li>
<li><strong>strip &ndash;strip-debug binary</strong> used to strip symbols from binary - use <strong>&ndash;strip-uneeded</strong> to provide only enough to load binary (less information)</li>
</ul>


<h2>adding debug symbols</h2>

<ul>
<li><strong>symbol-file symbols</strong> used to add debug symbols file to binary without symbols at runtime in <strong>gdb</strong></li>
<li><strong>objcopy &ndash;add-gnu-debuglink=debug_symbols binary</strong> used to add debug symbols to stripped binary where <strong>debug_symbols</strong> is the symbols file, and <strong>binary</strong> is the stripped binary</li>
</ul>

]]></content>
  </entry>
  
</feed>
