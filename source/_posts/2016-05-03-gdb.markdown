---
layout: post
title: "GDB"
date: 2016-05-03 10:24:55 -0500
comments: true
categories: [gdb,debugger, walkthrough]
---
## gdb examine program
*Notes and material referenced from SecurityTube GDB Primer, opensecurityresearch, GNU docs*

The goal of this blog post is to examine a smaller functioning program in gdb. We will walkthrough each instruction and examine how it relates to the program, so that
the reader has a better understanding of how the code executes line by line. Later we will take this knowledge and build from it, with a blog dedicated to interacting and modifying the program to allow it to do what we want.

<!--more-->



<span style="color:red;">note</span> gdb has AT&T & Intel disassembly styles offered

    (gdb) set disassembly-flavor intel

<span style="color:red;">tip</span> if we want to see more code we can

    (gdb) set listsize 40
    (gdb) l 1

without looking too hard at our source code we can see that we have a few functions that look to take input
from the user and check to see if it matches our defined password, and if it does it prints a code

---
## disassemble main

if we disassemble the main function we can see a few interesting (noticeable) things

  + a jump if greater to *(main+57)*
  + above that is a compare instruction
  - a print call
  - an exit call
  - a call to *IsPasswordCorrect* function
  - a jump if not equal to *(main+11)* and above that is the compare instruction
  - a call to a UnlockSecret function
  - a jmp to *(main+111)*

to try and see what's going on let's set a breakpoint on main and run our program

    (gdb) b main
    (gdb) run AAA

let's disassemble our program and examine the contents more closely

    (gdb) dis main

the first 2 instructions we see are

    : push ebp
    : mov  ebp,esp

these instructions represent the function prologue, **ebp** (the base pointer) gets pushed onto the stack and then the **esp** register is copied (saved) from the previous stack frame into **ebp**

    : and  esp,0xfffffff0

the compiler adds this instruction to align the stack to a 16-byte boundary

    : sub  esp,0x20

the next instruction allocates a buffer of 32 bytes on the stack to make room for our user command-line arguments

![gdb main prologue](/images/gdbdismain.png)

---
let's examine our register's contents

    (gdb) info reg

we can see there are 2 columns with both in hex, so for a comparison it would be nice to have hex with something else let's use base 10

    (gdb) set radix 10.

now we have hex and base 10

our eip register contains the address *0x80484d0* which is the start of the function *(main+9)*
below we see the next instruction

    : cmp  [ebp+0x8],0x1

so let's see what *(ebp+8)* is currently

`(gdb) x/1xw ($ebp+8)` is 2

on to our next instruction `(gdb) stepi`

gdb shows us that we are at *0x80484d8 (main+17)*  it also tells us, that equates to the source code line

    if (argc < 2)

to confirm this we can check our main instruction disassembly

    (gdb) dis main

we are now at the `cmp  [ebp+0x8],0x1` which matches with the line of source code shown above

![gdb main start](/images/gdbdismain2.png)

---
let's check *(ebp+0x8)* again

`(gdb) x/1xw ($ebp+0x8)` is still 2, so we compare 2&1

on to the next instruction `(gdb) stepi`

now we are at a `: jg  0x8048500` or *(main+57)* instruction

we are supposed to jump if greater - to *(main+57)*, so is 2 greater than 1?

`(gdb) stepi` moving on we see that we do take the jump and our instruction pointer ,**eip**, now points to *(main+57) -> 0x8048500*

looking at our assembly code for the main function at *(main+57)* it is not very apparent as to what this code is doing, however, since we have the source code and this was compiled with debug symbols, gdb tells us the line of source code here is

    checkPass = IsPasswordCorrect(argv[1],"\x09\x01\x02\x03");

![gdb dis main](/images/gdbdismain3.png)

---
if we look at our registers again

    (gdb) info reg

we can see **eax** contains *0xbfffeeb4* which is the address or pointer of *(ebp+0xc)* that gets moved into **eax**

    : mov  eax,DWORD PTR[ebp+0xc]

let's look at what's happening here - the value at *(ebp+0xc)* (12 bytes down the stack from **ebp**) gets moved into **eax**, then the instruction

    : add  eax,0x4

moves us another 4 bytes

![gdb dis main](/images/gdbdismain4.png)

---

![stack frame](/images/osrstackframe.jpg)

above is an image taken from opensecurityresearch that illustrates this concept

*(ebp+12)* contains the function parameters (our user arguments), just as opensecurity research notes, the first element *(argv[0])* is always the program itself so we need to capture the second element in the array, *(argv[1])* - which is *(ebp+16)*

    (gdb) x/1w $eax

if we examine the **eax** register we can see that it contains *0xbffff0b9*

    (gdb) print argv[0]

sure enough argv[0] is *0xbffff0b9* which contains the path to our program

    (gdb) print argv[1]

similarly argv[1] is *0xbffff0dd* which contains our argument AAA

`(gdb) stepi` to the next instruction

    (gdb) x/1w $eax

and re-examine the contents of **eax** we can see we are correct, that **eax** now contains *0xbffff0dd* which is indeed our user argument AAA

    (gdb) stepi

    : mov  eax,DWORD PTR[eax]

dereferences the pointer (or grabs the value at that memory address) that **eax** points to and stores that value in the **eax** register itself
  - now we have our user given argument saved

    (gdb) stepi

    : mov  DWORD PTR[esp+0x4],0x8048638

next we move the contents of the memory address *0x8048638* into *(esp+0x4)*

![gdb dis main](/images/gdbdismain5.png)

---

but what is *0x8048638*? if we look at our main function the last address is *0x0804853c*, so it can be confusing to think about what the address might contain.

if we think about it, and look at where we are in the main function, gdb tells us we are at

    checkPass = IsPasswordCorrect(argv[1], "\x09\x01\x02\x03")

so perhaps it is related to this line?, it is in fact an argument that is stored in memory

to try get a closer look at what's happening we can examine the stack

if we look at where the contents of that memory address are stored *(esp+4)*

    (gdb) x/w $esp+4

we do see our address *0x8048638*

& if we examine what's inside

    (gdb) x/xw 0x8048638

we find *0x03020109* which is in fact the value we are comparing against (the user supplied command line argument argv[1])

    : mov  DWORD PTR[esp],eax

moves the value from **eax** into the location pointed to by the **esp** register

the previous several instructions are setting up the function variables for our next instruction which is the call to the function *0x8048498 IsPasswordCorrect*

the next address to execute gets placed onto the stack & after our *IsPasswordCorrect* function finishes it will return to the next address for execution

if we `(gdb) stepi` we see our *IsPasswordCorrect* function call with the arguments assigned to their respective variables in gdb cool!

  - we see password=AAA & userInput=0x8048638 (or \t\001\002\003 or 0x03020109) , which is our static value

![gdb setup function call](/images/gdbdismain6.png)

## disassemble IsPasswordCorrect

if we were to continue with a `(gdb) stepi` command the call to our *IsPasswordCorrect* function would place us at the start of the function prologue, alternatively, we can

  - set a breakpoint on *IsPasswordCorrect*

    `(gdb) b IsPasswordCorrect`

  - re-run the program and continue until it hits that function

    `(gdb) run AAA
    (gdb) c`

  - & this will bypass the prologue

    `(gdb) dis IsPasswordCorrect`

as with the main function before, the first instructions are the function prologue (which we bypassed), and we also get a buffer of 40 bytes allocated on the stack

we can see our **eip** points to our first instruction

    : mov  eax,DWORD PTR[ebp+0xc]
    : mov  DWORD PTR[esp+0x4],eax

as we saw previously in our *main* function the value at *(ebp+0xc)* (12 bytes down the stack from **ebp**) gets moved into **eax**

remember, this is how we put our argument into **eax**

ok, so let's take a look at the **eax** register

`(gdb) print $eax` it contains the address *0xbffff0dd*

ok & what does that address contain

`(gdb) print *0xbffff0dd` 0x414141 - great it's our argument

if we `(gdb) stepi`, gdb tells us

    result = strcmp(password,userInput)
    : mov  DWORD PTR[esp+0x4],eax

we mov **eax** onto the stack at *(esp+4)* & if we do a

`(gdb) x/xw $esp+4` we can see the address *0x08048638*

`(gdb) x/xw 0x08048638` is our userInput 09\01\02\03

![gdb dis IsPasswordCorrect](/images/gdbdisIPC1.png)

---
if we continue `(gdb) stepi` we see that we grab the address to our base pointer *(ebp+8)* and store that in **eax**

the contents of this is our argument AAA

continuing `(gdb) stepi` we see that we now move **eax** into a stack pointer

the next instruction is a function call to **strcmp**, and to get a better idea about what's going on we can

`(gdb) x/2xw $esp` examine 2 words on the stack

we see *0xbffff0dd* and *0x08048638* currently exist which are the 2 values we are comparing (password & userInput)

here we use a `(gdb) nexti` to proceed to the end of the **strcmp** function

we see that the next value on the stack is the next address *0x080484b0* - this address is the instruction

    : mov  DWORD PTR[ebp-0xc],eax

it looks like we want to put the contents of **eax** (AAA) into an address pointer to *(ebp-0xc)*

if we `(gdb)  stepi` we see

    : cmp  DWORD PTR[ebp-0xc],0x0

gdb also tells us that we are on line 31 of our source code which is `if(result == 0)`

so this is our **if** statement, where we compare our result (**eax**) with 0

![gdb dis IsPasswordCorrect](/images/gdbdisIPC2.png)

remember for the **strcmp** value to be 0, str1 will be equal to str2

if we `(gdb) stepi` we can see we are now at jne (jump if not equal) to the *(IsPasswordCorrect+40)*

because our (**cmp 0** with **eax**) or (**if result == 0**) did not evaluate to 0, we do take this jump

`(gdb) stepi` takes us to *0x080484c0*, which is *(IsPasswordCorrect+40)* & this begins our function wind down, or function epilogue, which I will explain at the end of the main function

![gdb dis IsPasswordCorrect](/images/gdbdisIPC3.png)

## back to main

when we return from our *IsPasswordCorrect* function, we are placed at *0x08048518*

    : mov  DWORD PTR[esp+0x1c],eax

we can see that we are putting **eax** onto the stack and then executing a **cmp** against it on the following instruction, `(gdb) stepi`

    : cmp  DWORD PTR[esp,0x1c],0x1

this instruction is comparing our **eax** value (previously returned IsPasswordCorrect value) with 1, `(gdb) stepi`

    : jne  0x804852a(main+99)

we will jump if that value is not equal

because our *IsPasswordCorrect* function returned 0 (the password & userInput were not equal), our checkPass fails & does not equal 1

so we take the jump to *(main+99)*

`: mov  DWORD PTR[esp],0x8048640` we place the contents of *0x8048640* onto the stack

we can examine that address to see what the contents are

`(gdb) x/s 0x8048640` "\n\nIncorrect Password! Please try again! \n\n"

this makes sense because our values were not equal

    (gdb) stepi
    : call  0x8048398

our next instruction is a call to puts which is the putsrtring function that displays the message on the screen

![gdb dis main](/images/gdbfinishmain.png)

finally - we wind down the main function

- `: mov  eax,0x0` zero out the **eax** register

- `: leave` call leave, which is the call for the function epilogue and can be broken down to the instructions

  - `: mov esp, ebp` close the stack frame by moving the base pointer into* **esp** (putting the stack pointer back to where it was originally when the function was called)

  - `: pop ebp` then pop it off the stack to restore the calling function's stack frame

- `: ret` the ret instruction pops the return address of the previous stack frame off the stack and returns us to the calling function