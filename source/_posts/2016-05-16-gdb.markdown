---
layout: post
title: "GDB"
date: 2016-05-16 10:10:39 -0500
comments: true
categories: [gdb, debugger]
---
## gdb conditional breakpoints
*Notes and material referenced from SecurityTube GDB Primer*

This section goes over setting conditional breakpoints. When regular breakpoints aren't giving us the information we need when we need, it we might want a conditional breakpoint.
For example, if you only want to examine some memory at a certain place in a loop, you would set a conditional breakpoint.

<!--more-->

conditional breakpoints break only if a condition is met
---
if we run our program with debugging symbols, we see that we have a while loop that counts down

let's set a breakpoint on line 10 `(gdb) b 10`

if we run the program with any argument `(gdb) run testing` we see that our breakpoint is hit each time counter decrements

ok, this is a relatively small loop, but what if we want have a larger loop and are only interested in stopping at a specific point - what if we only want to break when counter = 5?

    (gdb) info b
    (gdb) condition 1 counter == 5

we examine our breakpoints, to see which Num is being assigned to the breakpoint we're interested in - here we only have 1 so that's easy enough

next we set our conditional breakpoint using the Num assigned to our breakpoint & then give the condition - counter == 5, we want to only break once counter is equal to 5

if we `(gdb) c` we see that it counts down without breaking as it did previously until our counter is indeed 5 `(gdb) print counter`

![gdb conditional breakpoint](/images/gdbcondbp.png)

---

if we donâ€™t have the source but want to apply a conditional bp we can still examine the assembly instructions to help us understand what's going on

`(gdb) info functions` sure enough nothing too useful here, so let's `(gdb) dis main`

in main we see the `: test eax,eax` instruction - which tells us that there is a string comparison in our code

ok, it makes sense to set bp on test eax to see what's happening here (where we see if eax is 0 or not)

`(gdb) break *0x08048478`

if we run our program with a random argument `(gdb) run testing` our breakpoint is hit, now let's step to the next instruction `(gdb) stepi` and examine what the eax register is

    (gdb) print $eax

eax is 1, ok, so if we `(gdb) stepi` again, we see that we are now at *(main+118)*, a mov instruction - we got here from the previous jne instruction that followed our test eax instruction

so if we continue execution of our program `(gdb) c` we see the following printed - Sorry! Please try again!, now we know that if eax is 1 we will not hit our desired correct password function

![gdb conditional breakpoint no source](/images/gdbcondbp2.png)

---
so let's set eax to 0 - this is easy enough, by keeping what we already have - we just re-run the program

    (gdb) run testing
    (gdb) set $eax = 0
    (gdb) c

and now change the eax register to 0 and continue - sure enough we hit the correct password function

however, taking what we previously learned about conditional breakpoints into consideration, we could have saved ourselves a lot of trouble by doing the following

after setting our breakpoint on the test eax instruction, we could have set a conditional breakpoint

    (gdb) condition 1 $eax !=0

so now it will only break when the eax register is not equal to 0, or when it fails the password check - this way we can change it only when necessary

![gdb conditional breakpoint no source](/images/gdbcondbp3.png)

---

