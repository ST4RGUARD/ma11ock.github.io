---
layout: post
title: "GDB"
date: 2016-04-15 12:54:38
comments: true
categories: [gdb, debugger, objcopy, strip, symbols]
---
## gdb debug symbols
*Notes and material referenced from SecurityTube GDB Primer*

  This section gives various information about the variables, functions, etc in a binary that can be read by the debugger.
  We will go over compiling source code with gdb debug symbols, what this allows to be read, as well as adding to, and stripping symbols from, a binary.

<!--more-->
  - can be part of the binary or a separate file
  - **gcc -ggdb** to compile with debug symbols for gdb

![gdb info variables](/images/gdbinfovar.png)

  - **list** will drop us to the main function if it has the source available
  - **list 3** will take you to that line of the source
  - **info variables** if compiled with dbg symbols  will display found variables under defined for the source file
  - if not compiled with symbols or source not available, the variables may be found and listed under non-debugging symbols
  - **info scope functionName** will provide local variables

![gdb info functions](/images/gdbsymbols.png)

  - here we use info functions to display all functions found in the source with debug options given at compile time

## stripping debug symbols
  - **objcopy --only-keep-debug binary dstfile** used to strip debug symbols from a binary & save symbols to file
  - **strip --strip-debug binary** used to strip symbols from binary - use **--strip-uneeded** to provide only enough to load binary (less information)

## adding debug symbols
  - **symbol-file symbols** used to add debug symbols file to binary without symbols at runtime in **gdb**
  - **objcopy --add-gnu-debuglink=debug_symbols binary** used to add debug symbols to stripped binary where **debug_symbols** is the symbols file, and **binary** is the stripped binary