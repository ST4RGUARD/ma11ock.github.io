---
layout: post
title: "GDB"
date: 2016-04-20 14:00:25 -0500
comments: true
categories: [gdb, debugger]
---
## gdb modifying memory
*Notes and material referenced from SecurityTube GDB Primer & GNU GDB documentation*

  This section will discuss modifying memory in gdb. We will look at altering variables and registers during our code's execution to control the flow our program.

<!--more-->
  - **run TEST 10 10** *run our program to examine the args*
  - **b main** *set a breakpoint on our main function to inspect our first argument*

  if we re-run our program, execution is paused when the breakpoint is hit. to see our argument's contents we can

  - **print argv[1]**
  - **x/5c argv[1]** *or we can examine the memory as 5 characters with each byte displayed as hex and the terminating null character displayed as well*

![gdb examine argument](/images/gdbsetarg.png)

  to change a character at that address we can

  - **set {char} address = 'B'** *now TEST becomes BEST*
  - **set {int} (address+4) = 1** *here we modify null and change it to an integer so BEST\x00 becomes BEST1*

![gdb set radix](/images/gdbsetradix.png)

  at times you may want to **change the default numeric input and output for gdb**. you can of course print different representations of output to the screen, but if you are going to be following and modifying variables that are used in calculations throughout the program, you may want to use a set format of input that will be easy to modify and follow (ex all hex/dec/octal etc). to change the way your input and output is displayed you need to change the radix

  - **show input-radix**
  - **show output-radix**
  - **set radix 10.** *will change both input and output to base 10*

  now if i want to modify a variable that is used in a base 10 calculation I don't have to do any conversions. for example let's modify our sum variable.

  - **b 24** *to better demonstrate this we put a breakpoint on the line where our sum has been calculated and is being printed*
  - **print sum** *after we continue execution of the program and our BP is hit we can print our variable*

  let's modify the contents. because we changed the input-radix we can enter a base 10 number and it will be taken in & then output as a base 10 number

  - **set sum = 1500** *if we continue execution the Sum of our arguments is now printed as 1500*

## setting registers

![gdb set registers](/images/gdbsetreg.png)

  now let's modify our program's registers and see if we can control the flow of our program.

  - **info reg** *display our current register values*
  - **set $eax = 10** *alter the contents of the eax register to 10*

  let's begin by looking for the non executing function we put in our program

  - **info func not** *finds a function called notExecute*
  - **info address notExecute** *find the address of our function at 0x80484d4*
  - **set $eip = 0x80484d4** *set our eip register to that address*
  - **info r $eip** *our eip reg is now the notExecute function*
  - **c** *our function notExecute is run because its address is the instruction run*

