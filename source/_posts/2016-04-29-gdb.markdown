---
layout: post
title: "GDB"
date: 2016-04-29 13:22:34 -0500
comments: true
categories: [debugger, gdb, convenience vars]
---
## gdb convenience variables
*Notes and material referenced from SecurityTube GDB Primer*

This section goes over some convenience var examples in gdb. They allow you to hold and re-use data within gdb.

<!--more-->

  - **set $i = 10** *i now holds the value 10*
  - **run AAA 10 20** *run our program with the arguments AAA 10 20*
  - **print argv[1]** *initally we see our argument is AAA*
  - **set $changeme = "BBB"** *we set a variable changeme to hold BBB*
  - **set argv[1] = $changeme** *now if we set our argument to our changeme value and continue execution, we can see our program prints the new value*

![gdb convenience vars](/images/gdbconvars.png)

There are many more things we can do with convenience vars. For example, if we look above, we can see that we can set conv vars to do some more complex things

  - **set $mem = (char *)malloc(10)** *here we set mem to allocate 10 bytes of memory with the programs malloc function*
  - **x/10xb $mem** *if we examine those 10 bytes of memory we will see that they are all 0x00 because they were allocated memory but not initialized to any specific values*
  - **call strcpy($mem,argv[1])** *utilizing the same functionality - we can call the strcpy function included in our program to copy our argument to the mem variable*
  - **x/10xb $mem** *now if we look at that memory we can see it the first bytes are A A A*
  - **set $num1=20**
  - **set $num2=30**
  - **set radix 10.** *as mentioned in a prev post we set the radix to base 10 here so our simple calculations can be read in as base 10 and output as base 10 instead of my gdb hex default*
  - **call addNumbers(2,3)** *additionally we can call our program's addNumbers function with numbers as well as with convenience variables*
  - **call addNumbers($num1,$num2)**
