---
layout: post
title: "GDB"
date: 2016-04-19 15:37:03 -0500
comments: true
categories: [gdb, debugger]
---
## gdb breakpoints
*Notes and material referenced from SecurityTube GDB Primer & GNU GDB documentation*

  This section will discuss breakpoints in gdb. A breakpoint pauses the execution of a program, and
  gives the user the ability to inspect and modify registers and memory while the program is paused.

<!--more-->
  let's inspect a program

  - **gdb ./program**
  - **run "args"**  *runs program with arguments*

  let's see what happens with our main function. we can run any of the following

  - **break main**
  - **break lineno**
  - **break *address**

  to get the address of main we can run

  - **p &main**
  - **info address main**

  however if we run **break main** we will get a different address than what is given from running the above commands. we will in fact get
  dumped into our main function at our echo function call that reads in our user input - as the address to set the breakpoint

  to view any breakpoints set

  - info breakpoints  *disable 1 or delete 1 allows us to modify our first breakpoint*

![gdb set breakpoint](/images/gdbreak1.png)

  let's re-enable our breakpoint. if we re-run our program with our breakpoint set **run "ImArg"** our program will pause at our breakpoint.
  if we want to look at that arg in our main function we can **examine memory**

## examine memory

  - **print argv[1]** *help x will give a list of helpful commands to inspect this further*
  - **x/s argv[1]** *if we want to look at 1 item and print it as a string this would be the notation*
  - **x/2s argv[0]** *above the 1 is not needed in front of the s for 1 item, however here if we want 2 items printed from argv[0] the number 2 is needed*

![gdb examine memory](/images/gdbexaminemem.png)

  let's look more closely at the main function *similarly we could disassemble an address or

  - **dis main** *will disassemble the main function* **=>** *symbol points to the EIP register*
  - **x/i address** *will show the assembly instruction for that 1 specific address*
  - **x/10i address** *this will show instructions for 10 addresses starting with the one given*
  - **x/10xw $esp** *this will print 10 hex words starting from the top of the stack - the ESP register*

![gdb dissasemble](/images/gdbdis.png)

  - **CTRL-L** *in my Ubuntu Linux distro clears the screen within gdb*

  **step** & **stepi** help step through the code *step goes line by line of the code & stepi steps through 1 instruction at a time*

![gdb step](/images/gdbstep.png)
