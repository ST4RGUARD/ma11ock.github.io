<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[a m4lefic security blog]]></title>
  <link href="http://ma11ock.github.io/atom.xml" rel="self"/>
  <link href="http://ma11ock.github.io/"/>
  <updated>2016-05-04T12:40:18-05:00</updated>
  <id>http://ma11ock.github.io/</id>
  <author>
    <name><![CDATA[m4lefic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/05/03/gdb/"/>
    <updated>2016-05-03T10:24:55-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/05/03/gdb</id>
    <content type="html"><![CDATA[<h2>gdb examine program</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer, opensecurityresearch, GNU docs</em></p>

<p>The goal of this blog post is to examine a smaller functioning program in gdb. We will walkthrough each instruction and examine how it relates to the program, so that
the reader has a better understanding of how the code executes line by line. Later we will take this knowledge and build from it, with a blog dedicated to interacting and modifying the program to allow it to do what we want.</p>

<!--more-->


<p><span style="color:red;">note</span> gdb has AT&amp;T &amp; Intel disassembly styles offered</p>

<pre><code>(gdb) set disassembly-flavor intel
</code></pre>

<p><span style="color:red;">tip</span> if we want to see more code we can</p>

<pre><code>(gdb) set listsize 40
(gdb) l 1
</code></pre>

<p>without looking too hard at our source code we can see that we have a few functions that look to take input
from the user and check to see if it matches our defined password, and if it does it prints a code</p>

<hr />

<h2>disassemble main</h2>

<p>if we disassemble the <em>main</em> function we can see a few interesting (noticeable) things</p>

<ul>
<li>a jump if greater to <em>(main+57)</em></li>
<li>above that is a compare instruction</li>
<li>a print call</li>
<li>an exit call</li>
<li>a call to <em>IsPasswordCorrect</em> function</li>
<li>a jump if not equal to <em>(main+11)</em> and above that is the compare instruction</li>
<li>a call to a UnlockSecret function</li>
<li>a jmp to <em>(main+111)</em></li>
</ul>


<p>to try and see what&rsquo;s going on let&rsquo;s set a breakpoint on <em>main</em> and run our program</p>

<pre><code>(gdb) b main
(gdb) run AAA
</code></pre>

<p>let&rsquo;s disassemble our program and examine the contents more closely</p>

<pre><code>(gdb) dis main
</code></pre>

<p>the first 2 instructions we see are</p>

<pre><code>: push ebp
: mov  ebp,esp
</code></pre>

<p>these instructions represent the function prologue, <strong>ebp</strong> (the base pointer) gets pushed onto the stack and then the <strong>esp</strong> register is copied (saved) from the previous stack frame into <strong>ebp</strong></p>

<pre><code>: and  esp,0xfffffff0
</code></pre>

<p>the compiler adds this instruction to align the stack to a 16-byte boundary</p>

<pre><code>: sub  esp,0x20
</code></pre>

<p>the next instruction allocates a buffer of 32 bytes on the stack to make room for our user command-line arguments</p>

<p><img src="http://ma11ock.github.io/images/gdbdismain.png" alt="gdb main prologue" /></p>

<hr />

<p>let&rsquo;s examine our register&rsquo;s contents</p>

<pre><code>(gdb) info reg
</code></pre>

<p>we can see there are 2 columns with both in hex, so for a comparison it would be nice to have hex with something else let&rsquo;s use base 10</p>

<pre><code>(gdb) set radix 10.
</code></pre>

<p>now we have hex and base 10</p>

<p>our eip register contains the address <em>0x80484d0</em> which is the start of the function <em>(main+9)</em>
below we see the next instruction</p>

<pre><code>: cmp  [ebp+0x8],0x1
</code></pre>

<p>so let&rsquo;s see what <em>(ebp+8)</em> is currently</p>

<p><code>(gdb) x/1xw ($ebp+8)</code> is 2</p>

<p>on to our next instruction <code>(gdb) stepi</code></p>

<p>gdb shows us that we are at <em>0x80484d8 (main+17)</em>  it also tells us, that equates to the source code line</p>

<pre><code>if (argc &lt; 2)
</code></pre>

<p>to confirm this we can check our <em>main</em> instruction disassembly</p>

<pre><code>(gdb) dis main
</code></pre>

<p>we are now at the <code>: cmp  [ebp+0x8],0x1</code> which matches with the line of source code shown above</p>

<p><img src="http://ma11ock.github.io/images/gdbdismain2.png" alt="gdb main start" /></p>

<hr />

<p>let&rsquo;s check <em>(ebp+0x8)</em> again</p>

<p><code>(gdb) x/1xw ($ebp+0x8)</code> is still 2, so we compare 2&amp;1</p>

<p>on to the next instruction <code>(gdb) stepi</code></p>

<p>now we are at a <code>: jg  0x8048500</code> or <em>(main+57)</em> instruction</p>

<p>we are supposed to jump if greater - to <em>(main+57)</em>, so is 2 greater than 1?</p>

<p><code>(gdb) stepi</code> moving on we see that we do take the jump and our instruction pointer ,<strong>eip</strong>, now points to <em>(main+57) -> 0x8048500</em></p>

<p>looking at our assembly code for the <em>main</em> function at <em>(main+57)</em> it is not very apparent as to what this code is doing, however, since we have the source code and this was compiled with debug symbols, gdb tells us the line of source code here is</p>

<pre><code>checkPass = IsPasswordCorrect(argv[1],"\x09\x01\x02\x03");
</code></pre>

<p><img src="http://ma11ock.github.io/images/gdbdismain3.png" alt="gdb dis main" /></p>

<hr />

<p>if we look at our registers again</p>

<pre><code>(gdb) info reg
</code></pre>

<p>we can see <strong>eax</strong> contains <em>0xbfffeeb4</em> which is the address or pointer of <em>(ebp+0xc)</em> that gets moved into <strong>eax</strong></p>

<pre><code>: mov  eax,DWORD PTR[ebp+0xc]
</code></pre>

<p>let&rsquo;s look at what&rsquo;s happening here - the value at <em>(ebp+0xc)</em> (12 bytes down the stack from <strong>ebp</strong>) gets moved into <strong>eax</strong>, then the instruction</p>

<pre><code>: add  eax,0x4
</code></pre>

<p>moves us another 4 bytes</p>

<p><img src="http://ma11ock.github.io/images/gdbdismain4.png" alt="gdb dis main" /></p>

<hr />

<p><img src="http://ma11ock.github.io/images/osrstackframe.jpg" alt="stack frame" /></p>

<p>above is an image taken from opensecurityresearch that illustrates this concept</p>

<p><em>(ebp+12)</em> contains the function parameters (our user arguments), just as opensecurity research notes, the first element <em>(argv[0])</em> is always the program itself so we need to capture the second element in the array, <em>(argv[1])</em> - which is <em>(ebp+16)</em></p>

<pre><code>(gdb) x/1w $eax
</code></pre>

<p>if we examine the <strong>eax</strong> register we can see that it contains <em>0xbffff0b9</em></p>

<pre><code>(gdb) print argv[0]
</code></pre>

<p>sure enough argv[0] is <em>0xbffff0b9</em> which contains the path to our program</p>

<pre><code>(gdb) print argv[1]
</code></pre>

<p>similarly argv[1] is <em>0xbffff0dd</em> which contains our argument AAA</p>

<p><code>(gdb) stepi</code> to the next instruction</p>

<pre><code>(gdb) x/1w $eax
</code></pre>

<p>and re-examine the contents of <strong>eax</strong> we can see we are correct, that <strong>eax</strong> now contains <em>0xbffff0dd</em> which is indeed our user argument AAA</p>

<pre><code>(gdb) stepi

: mov  eax,DWORD PTR[eax]
</code></pre>

<p>dereferences the pointer (or grabs the value at that memory address) that <strong>eax</strong> points to and stores that value in the <strong>eax</strong> register itself
  - now we have our user given argument saved</p>

<pre><code>(gdb) stepi

: mov  DWORD PTR[esp+0x4],0x8048638
</code></pre>

<p>next we move the contents of the memory address <em>0x8048638</em> into <em>(esp+0x4)</em></p>

<p><img src="http://ma11ock.github.io/images/gdbdismain5.png" alt="gdb dis main" /></p>

<hr />

<p>but what is <em>0x8048638</em>? if we look at our <em>main</em> function the last address is <em>0x0804853c</em>, so it can be confusing to think about what the address might contain.</p>

<p>if we think about it, and look at where we are in the <em>main</em> function, gdb tells us we are at</p>

<pre><code>checkPass = IsPasswordCorrect(argv[1], "\x09\x01\x02\x03")
</code></pre>

<p>so perhaps it is related to this line?, it is in fact an argument that is stored in memory</p>

<p>to try get a closer look at what&rsquo;s happening we can examine the stack</p>

<p>if we look at where the contents of that memory address are stored <em>(esp+4)</em></p>

<pre><code>(gdb) x/w $esp+4
</code></pre>

<p>we do see our address <em>0x8048638</em></p>

<p>&amp; if we examine what&rsquo;s inside</p>

<pre><code>(gdb) x/xw 0x8048638
</code></pre>

<p>we find <em>0x03020109</em> which is in fact the value we are comparing against (the user supplied command line argument argv[1])</p>

<pre><code>: mov  DWORD PTR[esp],eax
</code></pre>

<p>moves the value from <strong>eax</strong> into the location pointed to by the <strong>esp</strong> register</p>

<p>the previous several instructions are setting up the function variables for our next instruction which is the call to the function <em>0x8048498 IsPasswordCorrect</em></p>

<p>the next address to execute gets placed onto the stack &amp; after our <em>IsPasswordCorrect</em> function finishes it will return to the next address for execution</p>

<p>if we <code>(gdb) stepi</code> we see our <em>IsPasswordCorrect</em> function call with the arguments assigned to their respective variables in gdb cool!</p>

<ul>
<li>we see password=AAA &amp; userInput=0x8048638 (or \t\001\002\003 or 0x03020109) , which is our static value</li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbdismain6.png" alt="gdb setup function call" /></p>

<h2>disassemble IsPasswordCorrect</h2>

<p>if we were to continue with a <code>(gdb) stepi</code> command the call to our <em>IsPasswordCorrect</em> function would place us at the start of the function prologue, alternatively, we can</p>

<ul>
<li><p>set a breakpoint on <em>IsPasswordCorrect</em></p>

<p><code>(gdb) b IsPasswordCorrect</code></p></li>
<li><p>re-run the program and continue until it hits that function</p>

<p><code>(gdb) run AAA
(gdb) c</code></p></li>
<li><p>&amp; this will bypass the prologue</p>

<p><code>(gdb) dis IsPasswordCorrect</code></p></li>
</ul>


<p>as with the <em>main</em> function before, the first instructions are the function prologue (which we bypassed), and we also get a buffer of 40 bytes allocated on the stack</p>

<p>we can see our <strong>eip</strong> points to our first instruction</p>

<pre><code>: mov  eax,DWORD PTR[ebp+0xc]
: mov  DWORD PTR[esp+0x4],eax
</code></pre>

<p>as we saw previously in our <em>main</em> function the value at <em>(ebp+0xc)</em> (12 bytes down the stack from <strong>ebp</strong>) gets moved into <strong>eax</strong></p>

<p>remember, this is how we put our argument into <strong>eax</strong></p>

<p>ok, so let&rsquo;s take a look at the <strong>eax</strong> register</p>

<p><code>(gdb) print $eax</code> it contains the address <em>0xbffff0dd</em></p>

<p>ok &amp; what does that address contain</p>

<p><code>(gdb) print *0xbffff0dd</code> 0x414141 - great it&rsquo;s our argument</p>

<p>if we <code>(gdb) stepi</code>, gdb tells us</p>

<pre><code>result = strcmp(password,userInput)
: mov  DWORD PTR[esp+0x4],eax
</code></pre>

<p>we mov <strong>eax</strong> onto the stack at <em>(esp+4)</em> &amp; if we do a</p>

<p><code>(gdb) x/xw $esp+4</code> we can see the address <em>0x08048638</em></p>

<p><code>(gdb) x/xw 0x08048638</code> is our userInput 09\01\02\03</p>

<p><img src="http://ma11ock.github.io/images/gdbdisIPC1.png" alt="gdb dis IsPasswordCorrect" /></p>

<hr />

<p>if we continue <code>(gdb) stepi</code> we see that we grab the address to our base pointer <em>(ebp+8)</em> and store that in <strong>eax</strong></p>

<p>the contents of this is our argument AAA</p>

<p>continuing <code>(gdb) stepi</code> we see that we now move <strong>eax</strong> into a stack pointer</p>

<p>the next instruction is a function call to <strong>strcmp</strong>, and to get a better idea about what&rsquo;s going on we can</p>

<p><code>(gdb) x/2xw $esp</code> examine 2 words on the stack</p>

<p>we see <em>0xbffff0dd</em> and <em>0x08048638</em> currently exist which are the 2 values we are comparing (password &amp; userInput)</p>

<p>here we use a <code>(gdb) nexti</code> to proceed to the end of the <strong>strcmp</strong> function</p>

<p>we see that the next value on the stack is the next address <em>0x080484b0</em> - this address is the instruction</p>

<pre><code>: mov  DWORD PTR[ebp-0xc],eax
</code></pre>

<p>it looks like we want to put the contents of <strong>eax</strong> (AAA) into an address pointer to <em>(ebp-0xc)</em></p>

<p>if we <code>(gdb)  stepi</code> we see</p>

<pre><code>: cmp  DWORD PTR[ebp-0xc],0x0
</code></pre>

<p>gdb also tells us that we are on line 31 of our source code which is <code>if(result == 0)</code></p>

<p>so this is our <strong>if</strong> statement, where we compare our result (<strong>eax</strong>) with 0</p>

<p><img src="http://ma11ock.github.io/images/gdbdisIPC2.png" alt="gdb dis IsPasswordCorrect" /></p>

<p>remember for the <strong>strcmp</strong> value to be 0, str1 will be equal to str2</p>

<p>if we <code>(gdb) stepi</code> we can see we are now at jne (jump if not equal) to the <em>(IsPasswordCorrect+40)</em></p>

<p>because our (<strong>cmp 0</strong> with <strong>eax</strong>) or (<strong>if result == 0</strong>) did not evaluate to 0, we do take this jump</p>

<p><code>(gdb) stepi</code> takes us to <em>0x080484c0</em>, which is <em>(IsPasswordCorrect+40)</em> &amp; this begins our function wind down, or function epilogue, which I will explain at the end of the <em>main</em> function</p>

<p><img src="http://ma11ock.github.io/images/gdbdisIPC3.png" alt="gdb dis IsPasswordCorrect" /></p>

<h2>back to main</h2>

<p>when we return from our <em>IsPasswordCorrect</em> function, we are placed at <em>0x08048518</em></p>

<pre><code>: mov  DWORD PTR[esp+0x1c],eax
</code></pre>

<p>we can see that we are putting <strong>eax</strong> onto the stack and then executing a <strong>cmp</strong> against it on the following instruction, <code>(gdb) stepi</code></p>

<pre><code>: cmp  DWORD PTR[esp,0x1c],0x1
</code></pre>

<p>this instruction is comparing our <strong>eax</strong> value (previously returned IsPasswordCorrect value) with 1, <code>(gdb) stepi</code></p>

<pre><code>: jne  0x804852a(main+99)
</code></pre>

<p>we will jump if that value is not equal</p>

<p>because our <em>IsPasswordCorrect</em> function returned 0 (the password &amp; userInput were not equal), our checkPass fails &amp; does not equal 1</p>

<p>so we take the jump to <em>(main+99)</em></p>

<p><code>: mov  DWORD PTR[esp],0x8048640</code> we place the contents of <em>0x8048640</em> onto the stack</p>

<p>we can examine that address to see what the contents are</p>

<p><code>(gdb) x/s 0x8048640</code> &ldquo;\n\nIncorrect Password! Please try again! \n\n&rdquo;</p>

<p>this makes sense because our values were not equal</p>

<pre><code>(gdb) stepi
: call  0x8048398
</code></pre>

<p>our next instruction is a call to puts which is the putsrtring function that displays the message on the screen</p>

<p><img src="http://ma11ock.github.io/images/gdbfinishmain.png" alt="gdb dis main" /></p>

<p>finally - we wind down the <em>main</em> function</p>

<ul>
<li><p><code>: mov  eax,0x0</code> zero out the <strong>eax</strong> register</p></li>
<li><p><code>: leave</code> call leave, which is the call for the function epilogue and can be broken down to the instructions</p>

<ul>
<li><p><code>: mov esp, ebp</code> close the stack frame by moving the base pointer into* <strong>esp</strong> (putting the stack pointer back to where it was originally when the function was called)</p></li>
<li><p><code>: pop ebp</code> then pop it off the stack to restore the calling function&rsquo;s stack frame</p></li>
</ul>
</li>
<li><p><code>: ret</code> the ret instruction pops the return address of the previous stack frame off the stack and returns us to the calling function</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/29/gdb/"/>
    <updated>2016-04-29T13:22:34-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/29/gdb</id>
    <content type="html"><![CDATA[<h2>gdb convenience variables</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer</em></p>

<p>This section goes over some convenience var examples in gdb. They allow you to hold and re-use data within gdb.</p>

<!--more-->


<ul>
<li><strong>set $i = 10</strong> <em>i now holds the value 10</em></li>
<li><strong>run AAA 10 20</strong> <em>run our program with the arguments AAA 10 20</em></li>
<li><strong>print argv[1]</strong> <em>initally we see our argument is AAA</em></li>
<li><strong>set $changeme = &ldquo;BBB&rdquo;</strong> <em>we set a variable changeme to hold BBB</em></li>
<li><strong>set argv[1] = $changeme</strong> <em>now if we set our argument to our changeme value and continue execution, we can see our program prints the new value</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbconvars.png" alt="gdb convenience vars" /></p>

<p>There are many more things we can do with convenience vars. For example, if we look above, we can see that we can set conv vars to do some more complex things</p>

<ul>
<li><strong>set $mem = (char *)malloc(10)</strong> <em>here we set mem to allocate 10 bytes of memory with the programs malloc function</em></li>
<li><strong>x/10xb $mem</strong> <em>if we examine those 10 bytes of memory we will see that they are all 0x00 because they were allocated memory but not initialized to any specific values</em></li>
<li><strong>call strcpy($mem,argv[1])</strong> <em>utilizing the same functionality - we can call the strcpy function included in our program to copy our argument to the mem variable</em></li>
<li><strong>x/10xb $mem</strong> <em>now if we look at that memory we can see it the first bytes are A A A</em></li>
<li><strong>set $num1=20</strong></li>
<li><strong>set $num2=30</strong></li>
<li><strong>set radix 10.</strong> <em>as mentioned in a prev post we set the radix to base 10 here so our simple calculations can be read in as base 10 and output as base 10 instead of my gdb hex default</em></li>
<li><strong>call addNumbers(2,3)</strong> <em>additionally we can call our program&rsquo;s addNumbers function with numbers as well as with convenience variables</em></li>
<li><strong>call addNumbers($num1,$num2)</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/20/gdb/"/>
    <updated>2016-04-20T14:00:25-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/20/gdb</id>
    <content type="html"><![CDATA[<h2>gdb modifying memory</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU GDB documentation</em></p>

<p>  This section will discuss modifying memory in gdb. We will look at altering variables and registers during our code&rsquo;s execution to control the flow our program.</p>

<!--more-->


<ul>
<li><strong>run TEST 10 10</strong> <em>run our program to examine the args</em></li>
<li><strong>b main</strong> <em>set a breakpoint on our main function to inspect our first argument</em></li>
</ul>


<p>  if we re-run our program, execution is paused when the breakpoint is hit. to see our argument&rsquo;s contents we can</p>

<ul>
<li><strong>print argv[1]</strong></li>
<li><strong>x/5c argv[1]</strong> <em>or we can examine the memory as 5 characters with each byte displayed as hex and the terminating null character displayed as well</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbsetarg.png" alt="gdb examine argument" /></p>

<p>  to change a character at that address we can</p>

<ul>
<li><strong>set {char} address = &lsquo;B&rsquo;</strong> <em>now TEST becomes BEST</em></li>
<li><strong>set {int} (address+4) = 1</strong> <em>here we modify null and change it to an integer so BEST\x00 becomes BEST1</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbsetradix.png" alt="gdb set radix" /></p>

<p>  at times you may want to <strong>change the default numeric input and output for gdb</strong>. you can of course print different representations of output to the screen, but if you are going to be following and modifying variables that are used in calculations throughout the program, you may want to use a set format of input that will be easy to modify and follow (ex all hex/dec/octal etc). to change the way your input and output is displayed you need to change the radix</p>

<ul>
<li><strong>show input-radix</strong></li>
<li><strong>show output-radix</strong></li>
<li><strong>set radix 10.</strong> <em>will change both input and output to base 10</em></li>
</ul>


<p>  now if i want to modify a variable that is used in a base 10 calculation I don&rsquo;t have to do any conversions. for example let&rsquo;s modify our sum variable.</p>

<ul>
<li><strong>b 24</strong> <em>to better demonstrate this we put a breakpoint on the line where our sum has been calculated and is being printed</em></li>
<li><strong>print sum</strong> <em>after we continue execution of the program and our BP is hit we can print our variable</em></li>
</ul>


<p>  let&rsquo;s modify the contents. because we changed the input-radix we can enter a base 10 number and it will be taken in &amp; then output as a base 10 number</p>

<ul>
<li><strong>set sum = 1500</strong> <em>if we continue execution the Sum of our arguments is now printed as 1500</em></li>
</ul>


<h2>setting registers</h2>

<p><img src="http://ma11ock.github.io/images/gdbsetreg.png" alt="gdb set registers" /></p>

<p>  now let&rsquo;s modify our program&rsquo;s registers and see if we can control the flow of our program.</p>

<ul>
<li><strong>info reg</strong> <em>display our current register values</em></li>
<li><strong>set $eax = 10</strong> <em>alter the contents of the eax register to 10</em></li>
</ul>


<p>  let&rsquo;s begin by looking for the non executing function we put in our program</p>

<ul>
<li><strong>info func not</strong> <em>finds a function called notExecute</em></li>
<li><strong>info address notExecute</strong> <em>find the address of our function at 0x80484d4</em></li>
<li><strong>set $eip = 0x80484d4</strong> <em>set our eip register to that address</em></li>
<li><strong>info r $eip</strong> <em>our eip reg is now the notExecute function</em></li>
<li><strong>c</strong> <em>our function notExecute is run because its address is the instruction run</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/19/gdb/"/>
    <updated>2016-04-19T15:37:03-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/19/gdb</id>
    <content type="html"><![CDATA[<h2>gdb breakpoints</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU GDB documentation</em></p>

<p>  This section will discuss breakpoints in gdb. A breakpoint pauses the execution of a program, and
  gives the user the ability to inspect and modify registers and memory while the program is paused.</p>

<!--more-->


<p>  let&rsquo;s inspect a program</p>

<ul>
<li><strong>gdb ./program</strong></li>
<li><strong>run &ldquo;args&rdquo;</strong>  <em>runs program with arguments</em></li>
</ul>


<p>  let&rsquo;s see what happens with our main function. we can run any of the following</p>

<ul>
<li><strong>break main</strong></li>
<li><strong>break lineno</strong></li>
<li><strong>break *address</strong></li>
</ul>


<p>  to get the address of main we can run</p>

<ul>
<li><strong>p &amp;main</strong></li>
<li><strong>info address main</strong></li>
</ul>


<p>  however if we run <strong>break main</strong> we will get a different address than what is given from running the above commands. we will in fact get
  dumped into our main function at our echo function call that reads in our user input - as the address to set the breakpoint</p>

<p>  to view any breakpoints set</p>

<ul>
<li>info breakpoints  <em>disable 1 or delete 1 allows us to modify our first breakpoint</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbreak1.png" alt="gdb set breakpoint" /></p>

<p>  let&rsquo;s re-enable our breakpoint. if we re-run our program with our breakpoint set <strong>run &ldquo;ImArg&rdquo;</strong> our program will pause at our breakpoint.
  if we want to look at that arg in our main function we can <strong>examine memory</strong></p>

<h2>examine memory</h2>

<ul>
<li><strong>print argv[1]</strong> <em>help x will give a list of helpful commands to inspect this further</em></li>
<li><strong>x/s argv[1]</strong> <em>if we want to look at 1 item and print it as a string this would be the notation</em></li>
<li><strong>x/2s argv[0]</strong> <em>above the 1 is not needed in front of the s for 1 item, however here if we want 2 items printed from argv[0] the number 2 is needed</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbexaminemem.png" alt="gdb examine memory" /></p>

<p>  let&rsquo;s look more closely at the main function *similarly we could disassemble an address or</p>

<ul>
<li><strong>dis main</strong> <em>will disassemble the main function</em> <strong>=></strong> <em>symbol points to the EIP register</em></li>
<li><strong>x/i address</strong> <em>will show the assembly instruction for that 1 specific address</em></li>
<li><strong>x/10i address</strong> <em>this will show instructions for 10 addresses starting with the one given</em></li>
<li><strong>x/10xw $esp</strong> <em>this will print 10 hex words starting from the top of the stack - the ESP register</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbdis.png" alt="gdb dissasemble" /></p>

<ul>
<li><strong>CTRL-L</strong> <em>in my Ubuntu Linux distro clears the screen within gdb</em></li>
</ul>


<p>  <strong>step</strong> &amp; <strong>stepi</strong> help step through the code <em>step goes line by line of the code &amp; stepi steps through 1 instruction at a time</em></p>

<p><img src="http://ma11ock.github.io/images/gdbstep.png" alt="gdb step" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STRACE]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/18/strace/"/>
    <updated>2016-04-18T14:11:51-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/18/strace</id>
    <content type="html"><![CDATA[<h2>strace</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; strace man page</em></p>

<ul>
<li><em>may need to</em> <strong>apt-get install strace</strong> <em>on kali linux</em></li>
</ul>


<p>This section will cover the strace utility. Strace runs against the command or executable given. It intercepts the system calls
for these processes and records them. This provides very useful diagnostic, and debugging to the user as well as the ability to profile programs.</p>

<!--more-->


<ul>
<li><strong>usage:</strong> strace executable args</li>
<li>system calls are displayed as they relate to our program line by line</li>
<li><strong>-r</strong> is a relative timestamp that gives insight into how long each sys call takes</li>
</ul>


<p><img src="http://ma11ock.github.io/images/stracertimestamp.png" alt="strace -r" /></p>

<ul>
<li>if we are interested in specific system calls or multiple calls in the executable</li>
<li><strong>strace -e connect,write binary args</strong></li>
</ul>


<p><img src="http://ma11ock.github.io/images/stracemultisyscall.png" alt="strace specific/multi sys calls" /></p>

<h2>strace running process</h2>

<ul>
<li>we can also monitor sys calls of a running process</li>
<li><strong>nc google.com 80</strong></li>
</ul>


<p><img src="http://ma11ock.github.io/images/stracenc.png" alt="strace netcat example" /></p>

<ul>
<li>we netcat google on port 80</li>
<li>we then grab the process ID of the running process &amp; then run strace on that PID</li>
<li><strong>ps ax|grep nc</strong></li>
<li><strong>strace -p PID</strong></li>
</ul>


<p><img src="http://ma11ock.github.io/images/straceprocattach.png" alt="strace active process" /></p>

<ul>
<li>strace now says process 6697 attached, and is waiting</li>
<li><p>if we enter <strong>GET /</strong> as seen in our netcat example picture - all of the sys calls used to perform that request are displayed in the above pic</p></li>
<li><p>we can print a statistical summary of all the sys calls made</p></li>
<li><strong>strace -c binary args</strong></li>
</ul>


<p><img src="http://ma11ock.github.io/images/stracesummary.png" alt="strace sys call summary" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NM]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/18/nm/"/>
    <updated>2016-04-18T11:33:42-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/18/nm</id>
    <content type="html"><![CDATA[<h2>nm</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer &amp; GNU Binutils docs</em></p>

<p>This section will cover the GNU utility NM. NM lists symbols from object files. It can give us
a quick way to analyze different debug symbols in a binary.</p>

<!--more-->


<ul>
<li>the output is split into 3 columns by default <strong>Virtual Address</strong> | <strong>Symbol Type</strong> | <strong>Symbol Name</strong></li>
</ul>


<p><img src="http://ma11ock.github.io/images/nmsymboltype.png" alt="nm symbol types" /></p>

<ul>
<li><strong>lower case</strong> letter is a <strong>local</strong> symbol</li>
<li><strong>upper case</strong> letter is an <strong>external</strong> symbol</li>
</ul>


<h2>common usage</h2>

<ul>
<li><strong>nm exe</strong></li>
<li><strong>nm -a calc_DEBUG|grep &lsquo;function&rsquo;</strong>  <em>displays all symbols and we can grep for specific function</em></li>
<li><strong>nm -n calc_DEBUG</strong>                  <em>displays a list of all symbols sorted by address</em></li>
<li><strong>nm -g calc_DEBUG</strong>                  <em>displays a list of external symbols</em></li>
<li><strong>nm -S calc_DEBUG|grep &lsquo;function&rsquo;</strong>  <em>displays the size in bytes of reserved memory</em></li>
<li><strong>nm calc_DEBUG|grep &lsquo;B &rsquo;</strong>           <em>displays the uninitialized data</em></li>
<li><strong>nm calc_DEBUG|grep &rsquo;D &lsquo;</strong>           <em>displays the initialized data</em></li>
</ul>


<p><img src="http://ma11ock.github.io/images/nmusage.png" alt="nm usage examples" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB]]></title>
    <link href="http://ma11ock.github.io/blog/2016/04/15/gdbdbg/"/>
    <updated>2016-04-15T07:54:38-05:00</updated>
    <id>http://ma11ock.github.io/blog/2016/04/15/gdbdbg</id>
    <content type="html"><![CDATA[<h2>gdb debug symbols</h2>

<p><em>Notes and material referenced from SecurityTube GDB Primer</em></p>

<p>  This section gives various information about the variables, functions, etc in a binary that can be read by the debugger.
  We will go over compiling source code with gdb debug symbols, what this allows to be read, as well as adding to, and stripping symbols from, a binary.</p>

<!--more-->


<ul>
<li>can be part of the binary or a separate file</li>
<li><strong>gcc -ggdb</strong> to compile with debug symbols for gdb</li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbinfovar.png" alt="gdb info variables" /></p>

<ul>
<li><strong>list</strong> will drop us to the main function if it has the source available</li>
<li><strong>list 3</strong> will take you to that line of the source</li>
<li><strong>info variables</strong> if compiled with dbg symbols  will display found variables under defined for the source file</li>
<li>if not compiled with symbols or source not available, the variables may be found and listed under non-debugging symbols</li>
<li><strong>info scope functionName</strong> will provide local variables</li>
</ul>


<p><img src="http://ma11ock.github.io/images/gdbsymbols.png" alt="gdb info functions" /></p>

<ul>
<li>here we use info functions to display all functions found in the source with debug options given at compile time</li>
</ul>


<h2>stripping debug symbols</h2>

<ul>
<li><strong>objcopy &ndash;only-keep-debug binary dstfile</strong> used to strip debug symbols from a binary &amp; save symbols to file</li>
<li><strong>strip &ndash;strip-debug binary</strong> used to strip symbols from binary - use <strong>&ndash;strip-uneeded</strong> to provide only enough to load binary (less information)</li>
</ul>


<h2>adding debug symbols</h2>

<ul>
<li><strong>symbol-file symbols</strong> used to add debug symbols file to binary without symbols at runtime in <strong>gdb</strong></li>
<li><strong>objcopy &ndash;add-gnu-debuglink=debug_symbols binary</strong> used to add debug symbols to stripped binary where <strong>debug_symbols</strong> is the symbols file, and <strong>binary</strong> is the stripped binary</li>
</ul>

]]></content>
  </entry>
  
</feed>
